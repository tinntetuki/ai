# Docker Compose for AI Content Creator
# Production-ready multi-service deployment

version: '3.8'

services:
  # Main API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ai-content-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DEBUG=False
      - DATA_PATH=/app/data
      - OUTPUT_PATH=/app/data/output
      - TEMP_PATH=/app/data/temp
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/ai_content_db
    volumes:
      - ./data:/home/app/data
      - ./logs:/home/app/logs
      - ai_models:/home/app/.cache
    depends_on:
      - redis
      - postgres
    networks:
      - ai-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background worker for heavy processing
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    container_name: ai-content-worker
    restart: unless-stopped
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATA_PATH=/app/data
      - OUTPUT_PATH=/app/data/output
      - TEMP_PATH=/app/data/temp
    volumes:
      - ./data:/home/app/data
      - ./logs:/home/app/logs
      - ai_models:/home/app/.cache
    depends_on:
      - redis
      - postgres
    networks:
      - ai-network
    deploy:
      replicas: 2
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: ai-content-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-network
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru

  # PostgreSQL for metadata and task tracking
  postgres:
    image: postgres:15-alpine
    container_name: ai-content-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=ai_content_db
      - POSTGRES_USER=ai_user
      - POSTGRES_PASSWORD=ai_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_user -d ai_content_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: ai-content-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./data/output:/var/www/downloads
    depends_on:
      - api
    networks:
      - ai-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-content-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ai-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ai-content-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ai-network

networks:
  ai-network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
  ai_models:
  prometheus_data:
  grafana_data: